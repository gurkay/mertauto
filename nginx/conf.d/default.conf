# HTTP - redirect all requests to HTTPS (except for certbot challenges)
server {
    listen 80;
    listen [::]:80;
    server_name mertautogarage.com www.mertautogarage.com;
    
    # Certbot challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
        try_files $uri =404;
    }

    # Temporarily serve content over HTTP (for SSL certificate generation)
    location / {
        proxy_pass http://nextjs-frontend:3000;
        proxy_cache_bypass $http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

# HTTPS - proxy requests to frontend and backend
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name mertautogarage.com www.mertautogarage.com;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/mertautogarage.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mertautogarage.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/mertautogarage.com/chain.pem;
    
    # SSL Protocol and Cipher Settings (Updated for Nginx 1.26)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers (Updated for Nginx 1.26)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https:; frame-ancestors 'self';" always;
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Resource-Policy "same-site" always;

    # Common proxy settings
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    # Buffer and timeout settings (Optimized for Nginx 1.26)
    proxy_buffer_size 128k;
    proxy_buffers 8 128k;
    proxy_busy_buffers_size 256k;
    proxy_temp_file_write_size 256k;
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 60s;
    proxy_buffering on;
    proxy_request_buffering on;
    
    # Modern proxy optimizations
    keepalive_timeout 65;
    keepalive_requests 100;

    # Frontend
    location / {
        proxy_pass http://nextjs-frontend:3000;
        proxy_cache_bypass $http_upgrade;
    }

    # NextAuth.js genel auth endpoint'leri (frontend tarafından işlenecek)
    location ~ ^/api/auth/(providers|csrf|error|_log|session|callback|signout)(.*)$ {
        proxy_pass http://nextjs-frontend:3000$request_uri;
        proxy_cache_bypass $http_upgrade;
    }

    # NextAuth.js genel generate endpoint'leri (frontend tarafından işlenecek)
    location ~ ^/api/generate/ {
        proxy_pass http://nextjs-frontend:3000$request_uri;
        proxy_cache_bypass $http_upgrade;
    }

    # Dashboard ve diğer korumalı sayfalar için doğrudan erişim sağla
    location ~ ^/(dashboard|profile|settings)(.*)$ {
        proxy_pass http://nextjs-frontend:3000$request_uri;
        proxy_cache_bypass $http_upgrade;
        
        # Auth header ve cookie'leri aktarmak için
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
        proxy_pass_request_headers on;
        
        # NextAuth.js cookie'lerini iletmek için
        proxy_cookie_path / /;
        proxy_cookie_domain $host nextjs-frontend;
    }

    # Backend kimlik doğrulama endpoint'leri (signin, signup)
    location ~ ^/api/auth/(signin|signup|user)(.*)$ {
        proxy_pass http://spring-backend:8080$request_uri;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        # CORS for authentication endpoints (Updated for Nginx 1.26)
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Origin' 'https://mertautogarage.com' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
        add_header 'Access-Control-Expose-Headers' 'Authorization' always;

        # Handle preflight requests (Updated for Nginx 1.26)
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://mertautogarage.com' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Backend API routes
    location /api/ {
        proxy_pass http://spring-backend:8080/api/;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        # CORS for API endpoints (Updated for Nginx 1.26)
        add_header 'Access-Control-Allow-Origin' 'https://mertautogarage.com' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Expose-Headers' 'Authorization' always;

        # Handle preflight requests (Updated for Nginx 1.26)
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://mertautogarage.com' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Debug logs
        error_log /var/log/nginx/backend_error.log debug;
        access_log /var/log/nginx/backend_access.log;
    }

    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
